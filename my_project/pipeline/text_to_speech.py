#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Text to speech module for converting text scripts to audio.
"""

import os
from typing import Optional

from api.model_client import ModelClient
from config import settings


class TextToSpeech:
    """Converts text to speech audio."""
    
    def __init__(self, model_name: str = None):
        """
        Initialize the text-to-speech converter.
        
        Args:
            model_name: Name of the TTS model to use (defaults to settings)
        """
        self.model_client = ModelClient(model_type='tts')
        self.model = model_name or settings.MODEL_DEFAULTS["tts_model"]
    
    def convert(self, text: str, output_path: str) -> str:
        """
        Convert text to speech using minimaxi's text-to-speech API.
        
        Args:
            text: The text script to convert
            output_path: Path to save the generated audio file
            
        Returns:
            Path to the generated audio file
        """
        try:
            # Ensure directory exists
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # Call the text_to_speech method from ModelClient
            # The new implementation only requires text parameter
            audio_data = self.model_client.text_to_speech(
                text=text,
                component="TextToSpeech"
            )
            
            # Save the audio file
            with open(output_path, 'wb') as f:
                f.write(audio_data)
            
            return output_path
            
        except Exception as e:
            print(f"Error in text-to-speech conversion: {e}")
            
            # For demonstration, create a placeholder audio file
            self._create_placeholder_audio(output_path)
            return output_path
    
    def _create_placeholder_audio(self, output_path: str):
        """Create a placeholder audio file for demonstration purposes."""
        # Directory is already created in the convert method, no need to recreate it here
        
        # Create an empty text file with a note
        with open(output_path, 'w') as f:
            f.write("This is a placeholder for an audio file that would be generated by the minimaxi text-to-speech API.")
            
        print(f"Created placeholder audio file at {output_path}")
        
        return output_path


def main():
    """Test function for the TextToSpeech class."""
    # Test text
    test_text = "You might sit on a chair or cushion, feet flat on the floor, hands resting gently in your lap. <#1.0#> If you prefer lying down, thatâ€™s perfectly fine too. "
    # Create output directory if it doesn't exist
    output_dir = os.path.join(settings.OUTPUT_DIR, "tts")
    os.makedirs(output_dir, exist_ok=True)
    
    # Output file path
    output_path = os.path.join(output_dir, "test_speech.mp3")
    
    print(f"Testing text-to-speech conversion...")
    print(f"Text: {test_text[:50]}...")
    
    # Initialize TTS and convert text
    try:
        tts = TextToSpeech()
        result_path = tts.convert(text=test_text, output_path=output_path)
        
        # Check if file was created
        if os.path.exists(result_path):
            file_size = os.path.getsize(result_path)
            print(f"Audio file created successfully at: {result_path}")
            print(f"File size: {file_size} bytes")
        else:
            print(f"Failed to create audio file at: {result_path}")
    
    except Exception as e:
        print(f"Error during test: {e}")
        print("Please make sure TTS_API_KEY and TTS_GROUP_ID are set in your .env file")


if __name__ == "__main__":
    main() 